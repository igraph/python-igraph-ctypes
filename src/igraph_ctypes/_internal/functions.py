# This file should be autogenerated.

from typing import Iterable

from .conversion import any_to_igraph_bool_t, vertex_pairs_to_igraph_vector_int_t
from .lib import *  # noqa
from .types import VertexPair
from .wrappers import _Graph


def empty(n: int = 0, directed: bool = False) -> _Graph:
    """Type-annotated wrapper for `igraph_empty()`."""
    # Convert input arguments
    c_n = n
    c_directed = any_to_igraph_bool_t(directed)

    # Prepare output arguments
    c_graph = _Graph()

    # Call wrapped function
    igraph_empty(c_graph, c_n, c_directed)

    # Post-process output arguments
    c_graph.mark_initialized()

    # Return output argument
    return c_graph


def vcount(graph: _Graph) -> int:
    """Type-annotated wrapper for `igraph_vcount()`."""
    # Convert input arguments
    c_graph = graph

    # Prepare output arguments
    # Nothing to do

    # Call wrapped function
    c_retval = igraph_vcount(c_graph)

    # Convert return value
    return c_retval


def ecount(graph: _Graph) -> int:
    """Type-annotated wrapper for `igraph_ecount()`."""
    # Convert input arguments
    c_graph = graph

    # Prepare output arguments
    # Nothing to do

    # Call wrapped function
    c_retval = igraph_ecount(c_graph)

    # Convert return value
    return c_retval


def is_directed(graph: _Graph) -> bool:
    """Type-annotated wrapper for `igraph_is_directed()`."""
    # Convert input arguments
    c_graph = graph

    # Prepare output arguments
    # Nothing to do

    # Call wrapped function
    c_retval = igraph_is_directed(c_graph)

    # Convert return value
    return bool(c_retval)


def add_vertices(graph: _Graph, nv: int) -> None:
    """Type-annotated wrapper for `igraph_add_vertices()`."""
    # Convert input arguments
    c_graph = graph

    # Prepare output arguments
    # Nothing to do

    # Call wrapped function
    igraph_add_vertices(c_graph, nv, None)

    # Convert return value
    # Nothing to do


def add_edges(graph: _Graph, edges: Iterable[VertexPair]) -> None:
    """Type-annotated wrapper for `igraph_add_edges()`."""
    # Convert input arguments
    c_graph = graph
    c_edges = vertex_pairs_to_igraph_vector_int_t(edges)

    # Prepare output arguments
    # Nothing to do

    # Call wrapped function
    igraph_add_edges(c_graph, c_edges, None)

    # Convert return value
    # Nothing to do
