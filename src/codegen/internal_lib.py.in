# type: ignore
#
# Type annotations are ignored in this file because pylance is not smart enough
# to figure out that `restypes` and `argtypes` are valid for a function imported
# from a library

# fmt: off

from ctypes import cdll, c_bool, c_char_p, c_double, c_int, c_void_p, POINTER
from ctypes.util import find_library

from .attributes import (
    igraph_attribute_combination_t,
    igraph_attribute_table_t,
)
from .errors import handle_igraph_error_t
from .types import (
    FILE,
    igraph_bool_t,
    igraph_integer_t,
    igraph_real_t,
    igraph_error_t,
    igraph_t,
    igraph_graph_list_t,
    igraph_matrix_t,
    igraph_matrix_int_t,
    igraph_matrix_list_t,
    igraph_sparsemat_t,
    igraph_strvector_t,
    igraph_vector_t,
    igraph_vector_bool_t,
    igraph_vector_int_t,
    igraph_vector_int_list_t,
    igraph_vector_list_t,
    igraph_vector_ptr_t,
    igraph_vs_t,
    igraph_es_t,
    igraph_adjlist_t,
    igraph_arpack_options_t,
    igraph_bliss_info_t,
    igraph_error_handler_t,
    igraph_fatal_handler_t,
    igraph_hrg_t,
    igraph_layout_drl_options_t,
    igraph_maxflow_stats_t,
    igraph_interruption_handler_t,
    igraph_isocompat_t,
    igraph_plfit_result_t,
    igraph_rng_t,
    igraph_rng_type_t,
)


def _load_igraph_c_library():
    """Imports the low-level igraph C library using `ctypes`."""
    candidates = ("igraph", "libigraph")
    for candidate in candidates:
        path = find_library(candidate)
        if path is not None:
            break
    else:
        # Hardcoded path for testing purposes
        path = "/Users/tamas/dev/igraph/igraph/build/src/libigraph.3.dylib"

    lib = cdll.LoadLibrary(path)
    return lib


_lib = _load_igraph_c_library()

# Vector type

igraph_vector_init = _lib.igraph_vector_init
igraph_vector_init.restype = handle_igraph_error_t
igraph_vector_init.argtypes = [POINTER(igraph_vector_t), igraph_integer_t]

igraph_vector_destroy = _lib.igraph_vector_destroy
igraph_vector_destroy.restype = None
igraph_vector_destroy.argtypes = [c_void_p]

igraph_vector_init_array = _lib.igraph_vector_init_array
igraph_vector_init_array.restype = handle_igraph_error_t
igraph_vector_init_array.argtypes = [POINTER(igraph_vector_t), POINTER(igraph_real_t), igraph_integer_t]

igraph_vector_view = _lib.igraph_vector_view
igraph_vector_view.restype = POINTER(igraph_vector_t)
igraph_vector_view.argtypes = [POINTER(igraph_vector_t), POINTER(igraph_real_t), igraph_integer_t]

igraph_vector_e = _lib.igraph_vector_e
igraph_vector_e.restype = igraph_real_t
igraph_vector_e.argtypes = [POINTER(igraph_vector_t), igraph_integer_t]

igraph_vector_e_ptr = _lib.igraph_vector_e_ptr
igraph_vector_e_ptr.restype = POINTER(igraph_real_t)
igraph_vector_e_ptr.argtypes = [POINTER(igraph_vector_t), igraph_integer_t]

igraph_vector_push_back = _lib.igraph_vector_push_back
igraph_vector_push_back.restype = handle_igraph_error_t
igraph_vector_push_back.argtypes = [POINTER(igraph_vector_t), igraph_real_t]

igraph_vector_size = _lib.igraph_vector_size
igraph_vector_size.restype = igraph_integer_t
igraph_vector_size.argtypes = [POINTER(igraph_vector_t)]

# Integer vector type

igraph_vector_int_init = _lib.igraph_vector_int_init
igraph_vector_int_init.restype = handle_igraph_error_t
igraph_vector_int_init.argtypes = [POINTER(igraph_vector_int_t), igraph_integer_t]

igraph_vector_int_destroy = _lib.igraph_vector_int_destroy
igraph_vector_int_destroy.restype = None
igraph_vector_int_destroy.argtypes = [c_void_p]

igraph_vector_int_init_array = _lib.igraph_vector_int_init_array
igraph_vector_int_init_array.restype = handle_igraph_error_t
igraph_vector_int_init_array.argtypes = [POINTER(igraph_vector_int_t), POINTER(igraph_integer_t), igraph_integer_t]

igraph_vector_int_view = _lib.igraph_vector_int_view
igraph_vector_int_view.restype = POINTER(igraph_vector_int_t)
igraph_vector_int_view.argtypes = [POINTER(igraph_vector_int_t), POINTER(igraph_integer_t), igraph_integer_t]

igraph_vector_int_e = _lib.igraph_vector_int_e
igraph_vector_int_e.restype = igraph_integer_t
igraph_vector_int_e.argtypes = [POINTER(igraph_vector_int_t), igraph_integer_t]

igraph_vector_int_e_ptr = _lib.igraph_vector_int_e_ptr
igraph_vector_int_e_ptr.restype = POINTER(igraph_integer_t)
igraph_vector_int_e_ptr.argtypes = [POINTER(igraph_vector_int_t), igraph_integer_t]

igraph_vector_int_push_back = _lib.igraph_vector_int_push_back
igraph_vector_int_push_back.restype = handle_igraph_error_t
igraph_vector_int_push_back.argtypes = [POINTER(igraph_vector_int_t), igraph_integer_t]

igraph_vector_int_size = _lib.igraph_vector_int_size
igraph_vector_int_size.restype = igraph_integer_t
igraph_vector_int_size.argtypes = [POINTER(igraph_vector_int_t)]

# Boolean vector type

igraph_vector_bool_init = _lib.igraph_vector_bool_init
igraph_vector_bool_init.restype = handle_igraph_error_t
igraph_vector_bool_init.argtypes = [POINTER(igraph_vector_bool_t), igraph_integer_t]

igraph_vector_bool_destroy = _lib.igraph_vector_bool_destroy
igraph_vector_bool_destroy.restype = None
igraph_vector_bool_destroy.argtypes = [c_void_p]

igraph_vector_bool_init_array = _lib.igraph_vector_bool_init_array
igraph_vector_bool_init_array.restype = handle_igraph_error_t
igraph_vector_bool_init_array.argtypes = [POINTER(igraph_vector_bool_t), POINTER(igraph_bool_t), igraph_integer_t]

igraph_vector_bool_view = _lib.igraph_vector_bool_view
igraph_vector_bool_view.restype = POINTER(igraph_vector_bool_t)
igraph_vector_bool_view.argtypes = [POINTER(igraph_vector_bool_t), POINTER(igraph_bool_t), igraph_integer_t]

igraph_vector_bool_e = _lib.igraph_vector_bool_e
igraph_vector_bool_e.restype = igraph_bool_t
igraph_vector_bool_e.argtypes = [POINTER(igraph_vector_bool_t), igraph_integer_t]

igraph_vector_bool_e_ptr = _lib.igraph_vector_bool_e_ptr
igraph_vector_bool_e_ptr.restype = POINTER(igraph_bool_t)
igraph_vector_bool_e_ptr.argtypes = [POINTER(igraph_vector_bool_t), igraph_integer_t]

igraph_vector_bool_push_back = _lib.igraph_vector_bool_push_back
igraph_vector_bool_push_back.restype = handle_igraph_error_t
igraph_vector_bool_push_back.argtypes = [POINTER(igraph_vector_bool_t), igraph_bool_t]

igraph_vector_bool_size = _lib.igraph_vector_bool_size
igraph_vector_bool_size.restype = igraph_integer_t
igraph_vector_bool_size.argtypes = [POINTER(igraph_vector_bool_t)]

# Pointer vector type

igraph_vector_ptr_init = _lib.igraph_vector_ptr_init
igraph_vector_ptr_init.restype = handle_igraph_error_t
igraph_vector_ptr_init.argtypes = [POINTER(igraph_vector_ptr_t), igraph_integer_t]

igraph_vector_ptr_destroy = _lib.igraph_vector_ptr_destroy
igraph_vector_ptr_destroy.restype = None
igraph_vector_ptr_destroy.argtypes = [c_void_p]

# Matrix type

igraph_matrix_init = _lib.igraph_matrix_init
igraph_matrix_init.restype = handle_igraph_error_t
igraph_matrix_init.argtypes = [
    POINTER(igraph_matrix_t),
    igraph_integer_t,
    igraph_integer_t,
]

igraph_matrix_destroy = _lib.igraph_matrix_destroy
igraph_matrix_destroy.restype = None
igraph_matrix_destroy.argtypes = [c_void_p]

igraph_matrix_init_array = _lib.igraph_matrix_init_array
igraph_matrix_init_array.restype = handle_igraph_error_t
igraph_matrix_init_array.argtypes = [
    POINTER(igraph_matrix_t),
    POINTER(igraph_real_t),
    igraph_integer_t,
    igraph_integer_t,
    c_int,
]

igraph_matrix_view = _lib.igraph_matrix_view
igraph_matrix_view.restype = POINTER(igraph_matrix_t)
igraph_matrix_view.argtypes = [
    POINTER(igraph_matrix_t),
    POINTER(igraph_real_t),
    igraph_integer_t,
    igraph_integer_t,
]

igraph_matrix_ncol = _lib.igraph_matrix_ncol
igraph_matrix_ncol.restype = igraph_integer_t
igraph_matrix_ncol.argtypes = [POINTER(igraph_matrix_t)]

igraph_matrix_nrow = _lib.igraph_matrix_nrow
igraph_matrix_nrow.restype = igraph_integer_t
igraph_matrix_nrow.argtypes = [POINTER(igraph_matrix_t)]

igraph_matrix_e = _lib.igraph_matrix_e
igraph_matrix_e.restype = igraph_real_t
igraph_matrix_e.argtypes = [POINTER(igraph_matrix_t), igraph_integer_t, igraph_integer_t]

igraph_matrix_e_ptr = _lib.igraph_matrix_e_ptr
igraph_matrix_e_ptr.restype = POINTER(igraph_real_t)
igraph_matrix_e_ptr.argtypes = [POINTER(igraph_matrix_t), igraph_integer_t, igraph_integer_t]

# Integer matrix type

igraph_matrix_int_init = _lib.igraph_matrix_int_init
igraph_matrix_int_init.restype = handle_igraph_error_t
igraph_matrix_int_init.argtypes = [
    POINTER(igraph_matrix_int_t),
    igraph_integer_t,
    igraph_integer_t,
]

igraph_matrix_int_destroy = _lib.igraph_matrix_int_destroy
igraph_matrix_int_destroy.restype = None
igraph_matrix_int_destroy.argtypes = [c_void_p]

igraph_matrix_int_init_array = _lib.igraph_matrix_int_init_array
igraph_matrix_int_init_array.restype = handle_igraph_error_t
igraph_matrix_int_init_array.argtypes = [
    POINTER(igraph_matrix_int_t),
    POINTER(igraph_integer_t),
    igraph_integer_t,
    igraph_integer_t,
    c_int,
]

igraph_matrix_int_view = _lib.igraph_matrix_int_view
igraph_matrix_int_view.restype = POINTER(igraph_matrix_int_t)
igraph_matrix_int_view.argtypes = [
    POINTER(igraph_matrix_int_t),
    POINTER(igraph_integer_t),
    igraph_integer_t,
    igraph_integer_t,
]

igraph_matrix_int_ncol = _lib.igraph_matrix_int_ncol
igraph_matrix_int_ncol.restype = igraph_integer_t
igraph_matrix_int_ncol.argtypes = [POINTER(igraph_matrix_int_t)]

igraph_matrix_int_nrow = _lib.igraph_matrix_int_nrow
igraph_matrix_int_nrow.restype = igraph_integer_t
igraph_matrix_int_nrow.argtypes = [POINTER(igraph_matrix_int_t)]

igraph_matrix_int_e = _lib.igraph_matrix_int_e
igraph_matrix_int_e.restype = igraph_integer_t
igraph_matrix_int_e.argtypes = [POINTER(igraph_matrix_int_t), igraph_integer_t, igraph_integer_t]

igraph_matrix_int_e_ptr = _lib.igraph_matrix_int_e_ptr
igraph_matrix_int_e_ptr.restype = POINTER(igraph_integer_t)
igraph_matrix_int_e_ptr.argtypes = [POINTER(igraph_matrix_int_t), igraph_integer_t, igraph_integer_t]

# List of vectors type

igraph_vector_list_init = _lib.igraph_vector_list_init
igraph_vector_list_init.restype = handle_igraph_error_t
igraph_vector_list_init.argtypes = [POINTER(igraph_vector_list_t), igraph_integer_t]

igraph_vector_list_destroy = _lib.igraph_vector_list_destroy
igraph_vector_list_destroy.restype = None
igraph_vector_list_destroy.argtypes = [c_void_p]

igraph_vector_list_get_ptr = _lib.igraph_vector_list_get_ptr
igraph_vector_list_get_ptr.restype = POINTER(igraph_vector_t)
igraph_vector_list_get_ptr.argtypes = [POINTER(igraph_vector_list_t), igraph_integer_t]

igraph_vector_list_push_back = _lib.igraph_vector_list_push_back
igraph_vector_list_push_back.restype = handle_igraph_error_t
igraph_vector_list_push_back.argtypes = [POINTER(igraph_vector_list_t), POINTER(igraph_vector_t)]

igraph_vector_list_size = _lib.igraph_vector_list_size
igraph_vector_list_size.restype = igraph_integer_t
igraph_vector_list_size.argtypes = [POINTER(igraph_vector_list_t)]

# List of integer vectors type

igraph_vector_int_list_init = _lib.igraph_vector_int_list_init
igraph_vector_int_list_init.restype = handle_igraph_error_t
igraph_vector_int_list_init.argtypes = [POINTER(igraph_vector_int_list_t), igraph_integer_t]

igraph_vector_int_list_destroy = _lib.igraph_vector_int_list_destroy
igraph_vector_int_list_destroy.restype = None
igraph_vector_int_list_destroy.argtypes = [c_void_p]

igraph_vector_int_list_get_ptr = _lib.igraph_vector_int_list_get_ptr
igraph_vector_int_list_get_ptr.restype = POINTER(igraph_vector_int_t)
igraph_vector_int_list_get_ptr.argtypes = [POINTER(igraph_vector_int_list_t), igraph_integer_t]

igraph_vector_int_list_push_back = _lib.igraph_vector_int_list_push_back
igraph_vector_int_list_push_back.restype = handle_igraph_error_t
igraph_vector_int_list_push_back.argtypes = [POINTER(igraph_vector_int_list_t), POINTER(igraph_vector_int_t)]

igraph_vector_int_list_size = _lib.igraph_vector_int_list_size
igraph_vector_int_list_size.restype = igraph_integer_t
igraph_vector_int_list_size.argtypes = [POINTER(igraph_vector_int_list_t)]

# Vertex selector type

igraph_vs_none = _lib.igraph_vs_none
igraph_vs_none.restype = handle_igraph_error_t
igraph_vs_none.argtypes = [POINTER(igraph_vs_t)]

igraph_vs_1 = _lib.igraph_vs_1
igraph_vs_1.restype = handle_igraph_error_t
igraph_vs_1.argtypes = [POINTER(igraph_vs_t), igraph_integer_t]

igraph_vs_all = _lib.igraph_vs_all
igraph_vs_all.restype = handle_igraph_error_t
igraph_vs_all.argtypes = [POINTER(igraph_vs_t)]

igraph_vs_vector = _lib.igraph_vs_vector
igraph_vs_vector.restype = handle_igraph_error_t
igraph_vs_vector.argtypes = [POINTER(igraph_vs_t), POINTER(igraph_vector_int_t)]

igraph_vs_vector_copy = _lib.igraph_vs_vector_copy
igraph_vs_vector_copy.restype = handle_igraph_error_t
igraph_vs_vector_copy.argtypes = [POINTER(igraph_vs_t), POINTER(igraph_vector_int_t)]

igraph_vs_destroy = _lib.igraph_vs_destroy
igraph_vs_destroy.restype = None
igraph_vs_destroy.argtypes = [c_void_p]

# Edge selector type

igraph_es_none = _lib.igraph_es_none
igraph_es_none.restype = handle_igraph_error_t
igraph_es_none.argtypes = [POINTER(igraph_es_t)]

igraph_es_1 = _lib.igraph_es_1
igraph_es_1.restype = handle_igraph_error_t
igraph_es_1.argtypes = [POINTER(igraph_es_t), igraph_integer_t]

igraph_es_all = _lib.igraph_es_all
igraph_es_all.restype = handle_igraph_error_t
igraph_es_all.argtypes = [POINTER(igraph_es_t)]

igraph_es_vector = _lib.igraph_es_vector
igraph_es_vector.restype = handle_igraph_error_t
igraph_es_vector.argtypes = [POINTER(igraph_es_t), POINTER(igraph_vector_int_t)]

igraph_es_vector_copy = _lib.igraph_es_vector_copy
igraph_es_vector_copy.restype = handle_igraph_error_t
igraph_es_vector_copy.argtypes = [POINTER(igraph_es_t), POINTER(igraph_vector_int_t)]

igraph_es_destroy = _lib.igraph_es_destroy
igraph_es_destroy.restype = None
igraph_es_destroy.argtypes = [c_void_p]

# Random number generators

igraph_rng_init = _lib.igraph_rng_init
igraph_rng_init.restype = handle_igraph_error_t
igraph_rng_init.argtypes = [POINTER(igraph_rng_t), POINTER(igraph_rng_type_t)]

igraph_rng_destroy = _lib.igraph_rng_destroy
igraph_rng_destroy.restype = None
igraph_rng_destroy.argtypes = [c_void_p]

igraph_rng_default = _lib.igraph_rng_default
igraph_rng_default.restype = POINTER(igraph_rng_t)

igraph_rng_set_default = _lib.igraph_rng_set_default
igraph_rng_set_default.restype = POINTER(igraph_rng_t)
igraph_rng_set_default.argtypes = [POINTER(igraph_rng_t)]

# Graph type

igraph_destroy = _lib.igraph_destroy
igraph_destroy.restype = None
igraph_destroy.argtypes = [POINTER(igraph_t)]

# Attributes

igraph_has_attribute_table = _lib.igraph_has_attribute_table
igraph_has_attribute_table.restype = igraph_bool_t
igraph_has_attribute_table.argtypes = []

igraph_set_attribute_table = _lib.igraph_set_attribute_table
igraph_set_attribute_table.restype = POINTER(igraph_attribute_table_t)
igraph_set_attribute_table.argtypes = [POINTER(igraph_attribute_table_t)]

# Error handling and interruptions

igraph_set_error_handler = _lib.igraph_set_error_handler
igraph_set_error_handler.restype = igraph_error_handler_t
igraph_set_error_handler.argtypes = [igraph_error_handler_t]

igraph_set_fatal_handler = _lib.igraph_set_fatal_handler
igraph_set_fatal_handler.restype = igraph_fatal_handler_t
igraph_set_fatal_handler.argtypes = [igraph_fatal_handler_t]

igraph_set_interruption_handler = _lib.igraph_set_interruption_handler
igraph_set_interruption_handler.restype = igraph_interruption_handler_t
igraph_set_interruption_handler.argtypes = [igraph_interruption_handler_t]

# The rest of this file is generated by Stimulus

