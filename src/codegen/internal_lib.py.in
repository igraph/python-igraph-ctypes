# type: ignore
#
# Type annotations are ignored in this file because pylance is not smart enough
# to figure out that `restypes` and `argtypes` are valid for a function imported
# from a library

from ctypes import cdll, c_char_p, c_double, c_int, c_void_p, POINTER
from ctypes.util import find_library

from .errors import handle_igraph_error_t
from .types import (
    FILE,
    igraph_attribute_combination_t,
    igraph_bool_t,
    igraph_integer_t,
    igraph_real_t,
    igraph_error_t,
    igraph_t,
    igraph_graph_list_t,
    igraph_matrix_t,
    igraph_matrix_int_t,
    igraph_matrix_list_t,
    igraph_sparsemat_t,
    igraph_strvector_t,
    igraph_vector_t,
    igraph_vector_bool_t,
    igraph_vector_int_t,
    igraph_vector_int_list_t,
    igraph_vector_list_t,
    igraph_vector_ptr_t,
    igraph_vs_t,
    igraph_es_t,
    igraph_adjlist_t,
    igraph_arpack_options_t,
    igraph_bliss_info_t,
    igraph_hrg_t,
    igraph_layout_drl_options_t,
    igraph_maxflow_stats_t,
    igraph_isocompat_t,
    igraph_plfit_result_t,
)


def _load_igraph_c_library():
    """Imports the low-level igraph C library using `ctypes`."""
    candidates = ("igraph", "libigraph")
    for candidate in candidates:
        path = find_library(candidate)
        if path is not None:
            break
    else:
        # Hardcoded path for testing purposes
        path = "/Users/tamas/dev/igraph/igraph/build/src/libigraph.3.dylib"

    lib = cdll.LoadLibrary(path)
    return lib


_lib = _load_igraph_c_library()

# Vector type

igraph_vector_init = _lib.igraph_vector_init
igraph_vector_init.restype = handle_igraph_error_t
igraph_vector_init.argtypes = [POINTER(igraph_vector_t), igraph_integer_t]

igraph_vector_destroy = _lib.igraph_vector_destroy
igraph_vector_destroy.restype = None
igraph_vector_destroy.argtypes = [c_void_p]

igraph_vector_e = _lib.igraph_vector_e
igraph_vector_e.restype = igraph_real_t
igraph_vector_e.argtypes = [POINTER(igraph_vector_t), igraph_integer_t]

igraph_vector_push_back = _lib.igraph_vector_push_back
igraph_vector_push_back.restype = handle_igraph_error_t
igraph_vector_push_back.argtypes = [POINTER(igraph_vector_t), igraph_real_t]

igraph_vector_size = _lib.igraph_vector_size
igraph_vector_size.restype = igraph_integer_t
igraph_vector_size.argtypes = [POINTER(igraph_vector_t)]

# Integer vector type

igraph_vector_int_init = _lib.igraph_vector_int_init
igraph_vector_int_init.restype = handle_igraph_error_t
igraph_vector_int_init.argtypes = [POINTER(igraph_vector_int_t), igraph_integer_t]

igraph_vector_int_destroy = _lib.igraph_vector_int_destroy
igraph_vector_int_destroy.restype = None
igraph_vector_int_destroy.argtypes = [c_void_p]

igraph_vector_int_e = _lib.igraph_vector_int_e
igraph_vector_int_e.restype = igraph_integer_t
igraph_vector_int_e.argtypes = [POINTER(igraph_vector_int_t), igraph_integer_t]

igraph_vector_int_push_back = _lib.igraph_vector_int_push_back
igraph_vector_int_push_back.restype = handle_igraph_error_t
igraph_vector_int_push_back.argtypes = [POINTER(igraph_vector_int_t), igraph_integer_t]

igraph_vector_int_size = _lib.igraph_vector_int_size
igraph_vector_int_size.restype = igraph_integer_t
igraph_vector_int_size.argtypes = [POINTER(igraph_vector_int_t)]

# Vertex selector type

igraph_vs_none = _lib.igraph_vs_none
igraph_vs_none.restype = handle_igraph_error_t
igraph_vs_none.argtypes = [POINTER(igraph_vs_t)]

igraph_vs_1 = _lib.igraph_vs_1
igraph_vs_1.restype = handle_igraph_error_t
igraph_vs_1.argtypes = [POINTER(igraph_vs_t), igraph_integer_t]

igraph_vs_all = _lib.igraph_vs_all
igraph_vs_all.restype = handle_igraph_error_t
igraph_vs_all.argtypes = [POINTER(igraph_vs_t)]

igraph_vs_vector = _lib.igraph_vs_vector
igraph_vs_vector.restype = handle_igraph_error_t
igraph_vs_vector.argtypes = [POINTER(igraph_vs_t), POINTER(igraph_vector_int_t)]

igraph_vs_destroy = _lib.igraph_vs_destroy
igraph_vs_destroy.restype = None
igraph_vs_destroy.argtypes = [c_void_p]

# Edge selector type

igraph_es_none = _lib.igraph_es_none
igraph_es_none.restype = handle_igraph_error_t
igraph_es_none.argtypes = [POINTER(igraph_es_t)]

igraph_es_1 = _lib.igraph_es_1
igraph_es_1.restype = handle_igraph_error_t
igraph_es_1.argtypes = [POINTER(igraph_es_t), igraph_integer_t]

igraph_es_all = _lib.igraph_es_all
igraph_es_all.restype = handle_igraph_error_t
igraph_es_all.argtypes = [POINTER(igraph_es_t)]

igraph_es_vector = _lib.igraph_es_vector
igraph_es_vector.restype = handle_igraph_error_t
igraph_es_vector.argtypes = [POINTER(igraph_es_t), POINTER(igraph_vector_int_t)]

igraph_es_destroy = _lib.igraph_es_destroy
igraph_es_destroy.restype = None
igraph_es_destroy.argtypes = [c_void_p]

# Graph type

igraph_destroy = _lib.igraph_destroy
igraph_destroy.restype = None
igraph_destroy.argtypes = [POINTER(igraph_t)]

# The rest of this file is generated by Stimulus

